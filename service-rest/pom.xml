<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.badenia.feedback</groupId>
		<artifactId>feedback-system</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>
	<artifactId>service-rest</artifactId>

	<properties>
		<java.version>10</java.version>
		<docker.maven.plugin.fabric8.version>0.14.1</docker.maven.plugin.fabric8.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-rest</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.liquibase</groupId>
			<artifactId>liquibase-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.restdocs</groupId>
			<artifactId>spring-restdocs-mockmvc</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>net.serenity-bdd</groupId>
			<artifactId>serenity-core</artifactId>
			<version>1.4.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>net.serenity-bdd</groupId>
			<artifactId>serenity-spring</artifactId>
			<version>1.4.0</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
			<scope>test</scope>
		</dependency>


	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.9.1</version>
				<executions>
					<execution>
						<id>add-test-source</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/it/java</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>net.serenity-bdd.maven.plugins</groupId>
				<artifactId>serenity-maven-plugin</artifactId>
				<version>1.4.0</version>
				<executions>
					<execution>
						<id>serenity-reports</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>aggregate</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>docker</id>
			<dependencies>
				<dependency>
					<groupId>org.postgresql</groupId>
					<artifactId>postgresql</artifactId>
				</dependency>
			</dependencies>
			<build>
				<finalName>${project.artifactId}</finalName>
				<plugins>
					<plugin>
						<!-- The Docker Maven plugin is used to create docker image with the 
							fat jar -->
						<groupId>io.fabric8</groupId>
						<artifactId>docker-maven-plugin</artifactId>
						<version>${docker.maven.plugin.fabric8.version}</version>
						<configuration>
							<logDate>default</logDate>
							<autoPull>true</autoPull>
							<images>
								<!-- Postgres Image is used 'as-is' and is linked into the service 
									image -->
								<image>
									<alias>db</alias>
									<name>postgres:8</name>
									<run>
										<env>
											<POSTGRES_PASSWORD>test</POSTGRES_PASSWORD>
											<POSTGRES_USER>test</POSTGRES_USER>
											<POSTGRES_DB>test</POSTGRES_DB>
										</env>
										<wait>
											<log>database system is ready to accept connections</log>
											<time>20000</time>
										</wait>
										<log>
											<prefix>DB</prefix>
											<color>yellow</color>
										</log>
									</run>
								</image>

								<!-- Image holding the artifact of this build -->
								<image>
									<!-- Alias name which can used for linking containers during runtime -->
									<alias>service</alias>
									<name>fabric8/${project.artifactId}-fabric8:${project.version}</name>

									<!-- ....................................... -->
									<!-- Build configuration for creating images -->
									<!-- ....................................... -->
									<build>
										<from>openjdk:${java.version}</from>
										<!-- Assembly descriptor holds the reference to the created artifact -->
										<assembly>
											<descriptor>${basedir}/src/main/assembly/docker-assembly.xml</descriptor>
										</assembly>
										<!-- Expose ports -->
										<ports>
											<port>8080</port>
										</ports>
										<!-- Default command for the build image -->
										<cmd>java -Dspring.profiles.active=it -Djava.security.egd=file:/dev/./urandom -jar /maven/${project.build.finalName}.jar</cmd>
									</build>

									<!-- ............................................................... -->
									<!-- Runtime configuration for starting/stopping/linking containers -->
									<!-- ............................................................... -->
									<run>
										<!-- Assign dynamically mapped ports to maven variables (which 
											can be reused in integration tests) -->
										<ports>
											<port>tomcat.port:8080</port>
										</ports>
										<wait>
											<!-- Check for this URL to return a 200 return code .... -->
											<url>http://${docker.host.address}:${tomcat.port}/actuator/health</url>
											<!-- ... but at max 60 seconds -->
											<time>30000</time>
										</wait>
										<links>
											<!-- Links can be referenced via alias (db) or name (postgres:9). 
												If no link-alias (second "db") is given it takes the first part (first "db") 
												as link alias. So, <link>db</link> would be enough here -->
											<link>db:db</link>
										</links>
										<log>
											<prefix>SERVICE</prefix>
											<color>cyan</color>
										</log>
									</run>
								</image>
							</images>
						</configuration>

						<!-- Hooking into the lifecycle -->
						<executions>
							<execution>
								<id>start</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>build</goal>
									<goal>start</goal>
								</goals>
							</execution>
							<execution>
								<id>stop</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<artifactId>maven-failsafe-plugin</artifactId>
						<configuration>
							<systemPropertyVariables>
								<log.url>http://${docker.host.address}:${tomcat.port}/jolokia</log.url>
							</systemPropertyVariables>
						</configuration>
					</plugin>

				</plugins>
			</build>
			<activation>
				<activeByDefault />
			</activation>
		</profile>
	</profiles>

</project>